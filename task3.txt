When launched with command line parameters—arguments to the main or Main method in the case of Java or C# correspondingly, sys.argv in Python, process.argv in Node.js, etc.—it accepts 3 or more strings, each containing 6 comma-separated integers. E.g., python game.py 2,2,4,4,9,9 6,8,1,1,8,6 7,5,3,7,5,3. In principle, you may support any number of faces on a dice, like 4 or 20, but it's not very important.

If the arguments are incorrect, you must display a neat error message,not a stacktrace—what exactly is wrong and an example of how to do it right (e.g., user specified only two dice or no dice at all, used non-integers, etc.). All messages should be in English.

Important: dice configuration is passed as command line arguments; you don't "parse" it from the input stream.

The victory is defined as follows—computer and user select different dice, perform their "throws," and whoever rolls higher wins. 

The first step of the game is to determine who makes the first move. You have to prove to the user that choice is fair (it's not enough to generate a random bit 0 or 1; the user needs a proof of the fair play). 

When the users make the throw, they select dice using CLI "menu" and "generate" a random value with the help of the computer. The options consist of all the available dice, the exit (cancel) option, and the help option.


Of course, "random" generation is also should be provable fair. (edited)
[2:58 PM]
Please, note that the task is not "Implement some dice game". You need to implement all the specified requirements, including fair random generation, configurable dice, classes with limited responsibilities, etc.

To solve this task it's not enough to copy requirements into some AI tool and copy the code (at least today). There is nothing inherently bad in using any given tool, of course, while you get the properly working result, but I have to warn you against trying to submit something only remotely related to dice game, but not related to the specified requirements. It's better to do less, but understand what you exactly implemented. (edited)
[2:58 PM]
So, you need to implement provable "fair" random integer generation (other from 0 to 1 or from 0 to 5).

To generate such a value, the computer generates a one-time cryptographically secure random key (using corresponding API like SecureRandom, RandomNumberGenerator, random_bytes, etc.—it's mandatory) with a length of at least 256 bits.

Then the computer generates a uniformly distributed integer in the required range (using secure random; note that % operator is not enough to get uniform distribution) and calculates HMAC (based on SHA3) from the generated integers as a message with the generated secret key. Then the computer displays the HMAC to the user. 

After that, the user selects an integer in the same range. The resulted value is calculated as the sum of user number and computer number using modular arithmetic. When the computer displays the result, it also shows the used secret keys.

Re-read the paragraph above; the sequence is critical (it simply doesn't make sense to do it differently, for example, showing the key before the user number selection or displaying HMAC the second time instead of the key, etc.).

Note that "fair random generation" requires the participation of both parties, the user and the computer; just to generate random number and print it is not enough.

Thus the user can check that the computer doesn't cheat (of course, the computer can still try to cheat, but the user can counteract to that).

When you select the "help" option in the terminal, you need to display a table (use ASCII-graphic) that shows probabilities of winning for each dice pair. (edited)
[2:58 PM]
The table generation should be in a separate class. The probability calculation should be in a separate class. The implementation of the fair number generation "protocol" should be in a separate class. The random key/number generation and HMAC calculation should be in a separate class. The dice configuration parsing should be in a separate class. The dice abstraction should be in a separate class. Generally, your code should consist of at least 6-9 classes. 

You should use the core class libraries and third-party libraries to the maximum, and not reinvent the wheel. 

THE NUMBER OF DICE CAN BE ARBITRARY ( > 2).
[2:59 PM]
Example (of course, Java is used only as example, you will use language of your group):

java -jar game.jar 2,2,4,4,9,9 6,8,1,1,8,6 7,5,3,7,5,3
Let's determine who makes the first move.
I selected a random value in the range 0..1 (HMAC=C8E79615E637E6B14DDACA2309069A76D0882A4DD8102D9DEAD3FD6AC4AE289A).
Try to guess my selection.
0 - 0
1 - 1
X - exit
? - help
Your selection: 0
My selection: 1 (KEY=BD9BE48334BB9C5EC263953DA54727F707E95544739FCE7359C267E734E380A2).
I make the first move and choose the [6,8,1,1,8,6] dice.
Choose your dice:
0 - 2,2,4,4,9,9 
1 - 7,5,3,7,5,3
X - exit
? - help
Your selection: 0 
You choose the [2,2,4,4,9,9] dice.
It's time for my throw.
I selected a random value in the range 0..5 (HMAC=AA29E7275FE17A8D1184E2D4B6B0F46D815224270C94907CF007F2118CF400F7).
Add your number modulo 6.
0 - 0
1 - 1
2 - 2
3 - 3
4 - 4
5 - 5
X - exit
? - help
Your selection: 4
My number is 3 (KEY=7329ABD54A1633D2079EA7A48B401018D7EE6DD4C130AB5C31BC029CC8359637).
The result is 3 + 4 = 1 (mod 6).
My throw is 8.
It's time for your throw.
I selected a random value in the range 0..5 (HMAC=652863C27870CCA331458F4658D89413F405736FE5AA19B868FBDDAB5611A406).
Add your number modulo 6.
0 - 0
1 - 1
2 - 2
3 - 3
4 - 4
5 - 5
X - exit
? - help
Your selection: 5
My number is 0 (KEY=92564A82A515DEBC3FE9842D20DCEA3F3AAFB2080314A09A1E9A2CC729EDAF44).
The result is 0 + 5 = 5 (mod 6).
Your throw is 9.
You win (9 > 8)!
